{
  "name": "opbeat",
  "description": "A standalone (Node.js) client for Opbeat",
  "keywords": [
    "opbeat",
    "log",
    "logging",
    "error",
    "errors",
    "exceptions",
    "monitor",
    "monitoring",
    "alerts",
    "performance",
    "ops",
    "devops"
  ],
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/watson/opbeat-node.git"
  },
  "author": {
    "name": "Thomas Watson Steen",
    "email": "w@tson.dk"
  },
  "contributors": [
    {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk"
    },
    {
      "name": "Matt Robenolt",
      "email": "matt@ydekproductions.com"
    }
  ],
  "license": "BSD",
  "main": "index",
  "scripts": {
    "test": "NODE_ENV=test mocha --reporter dot"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "raw-stacktrace": "^1.0.0"
  },
  "devDependencies": {
    "connect": "*",
    "express": "*",
    "mocha": "*",
    "should": "*",
    "nock": "*",
    "glob": "*",
    "common": "*",
    "mock-udp": "*"
  },
  "gitHead": "a7b9aef184f51b20b6f1ca51ce5445558a775189",
  "readmeFilename": "README.md",
  "directories": {
    "test": "test"
  },
  "readme": "[![Build Status](https://travis-ci.org/watson/opbeat-node.png)](https://travis-ci.org/watson/opbeat-node)\n\nLog errors and stack traces in [Opbeat](http://opbeat.com/) from within\nyour Node.js applications. Includes middleware support for\n[Connect](http://www.senchalabs.org/connect/)/[Express](http://expressjs.com/).\n\nAll processing and sending happens asynchronously to not slow things\ndown if/when Opbeat is down or slow.\n\n## Compatibility\n * 0.10.x\n\n## Installation\n```\n$ npm install opbeat\n```\n\n## Basic Usage\n```javascript\nvar opbeat = require('opbeat');\nvar client = opbeat.createClient(options); // options are optional\n\nclient.captureMessage('Hello, world!');\n```\n\nOptions are:\n```javascript\nvar options = {\n  organization_id: '...',       // Required unless OPBEAT_ORGANIZATION_ID environment variable is set\n  app_id: '...',                // Required unless OPBEAT_APP_ID environment variable is set\n  secret_token: '...',          // Required unless OPBEAT_SECRET_TOKEN environment variable is set\n  env: 'production',            // Optional - falls back to NODE_ENV || 'development'\n  hostname: '...',              // Optional - falls back to OS hostname\n  logger: '...',                // Optional\n  handleExceptions: false,      // Optional - defaults to true\n  silent: true,                 // Optional - defaults to false\n  exceptionsAreCritical: false, // Optional - defaults to true\n  stackTraceLimit: 10           // Optional - defaults to Infinity\n};\n```\n\nYou can always get access to the created client from another part of\nyour Node.js app by loading the `opbeat` module again and accessing the\n`client` property:\n```javascript\nvar opbeat = require('opbeat');\nopbeat.client.captureError(new Error('foo'));\n```\n\nNote that `opbeat.client` will be undefined if you havent initialized\nthe client previously with a call to `opbeat.createClient()`.\n\n## Logging an error\n```javascript\nclient.captureError(new Error('Broke!'));\n```\n\n## Opbeat URL\n```javascript\nclient.captureMessage('Hello, world!', function (opbeatErr, url) {\n  console.log('The message can be found on:', url);\n});\n```\n\n```javascript\nclient.captureError(new Error('Broke!'), function (opbeatErr, url) {\n  console.log('The error can be found on:', url);\n});\n```\n\n## Events\nIf you really care if the event was logged or errored out, Client emits three events, `logged`, `connectionError` and `error`:\n\n```javascript\nclient.on('logged', function (url) {\n  console.log('Yay, it worked! View online at: ' + url);\n});\nclient.on('error', function (err) {\n  console.log('oh well, Opbeat returned an error');\n});\nclient.on('connectionError', function (err) {\n  console.log('Could not contact Opbeat :(');\n});\nclient.captureMessage('Boom');\n```\n\n## Environment variables\n### NODE_ENV\n`NODE_ENV` must be anything else than `development` or `test` for Opbeat to actually work. Running in development or test mode, will issue a warning and logging will be disabled.\n\n### OPBEAT_ORGANIZATION_ID\nOptionally declare the organization id to use for the client through the environment. Initializing the client in your app won't require setting the organization id.\n\n### OPBEAT_APP_ID\nOptionally declare the application id to use for the client through the environment. Initializing the client in your app won't require setting the application id.\n\n### OPBEAT_SECRET_TOKEN\nOptionally declare the Opbeat token to use for the client through the environment. Initializing the client in your app won't require setting the token.\n\n## Handling uncaught exceptions\nBy default uncaught exceptions are handled by the client and reported\nautomatically to Opbeat. To disable this, set the configration option\n`handleExceptions` to `false` when initializing the Opbeat client.\n\nIf you need you can then enable global error handling manually:\n\n```javascript\nclient.handleUncaughtExceptions();\n// or\nclient.handleUncaughtExceptions(callback);\n```\n\nIf you don't specify a callback, the node process is terminated when an\nuncaught exception is handled by the Opbeat client.\n\nIt is recommended that you don't leave the process running after\nreceiving an `uncaughtException`\n(http://nodejs.org/api/process.html#process_event_uncaughtexception), so\nif you are using the optional callback, remember to terminate the node\nprocess:\n\n```javascript\nvar client = opbeat.createClient({\n  handleExceptions: false\n});\n\nclient.handleUncaughtExceptions(function (err) {\n  // Do your own stuff... and then exit:\n  process.exit(1);\n});\n```\n\nThe callback is called **after** the event has been sent to the Opbeat server.\n\n## Methods\n```javascript\nclient.captureMessage(string|object, options, callback); // options and callback are optional\nclient.captureError(Error, options, callback); // options and callback are optional\nclient.captureRequestError(Error, req, options, callback); // options and callback are optional\n```\n\n## Advanced usage\n\n### Parameterized messages\n\nIf the message string contains state or time-specific data, Opbeat will\nnot recognize multiple errors as belonging to the same group, since the\nmessage text differs. To group these kind of messages, send the message\nas a parameterized message:\n\n```javascript\nclient.captureMessage({\n  message: 'Timeout exeeded by %d seconds',\n  params: [seconds]\n});\n```\n\n### Log levels\n\nOpbeat supports 5 different severity levels: 'debug', 'info', 'warn',\n'error', 'critical'.  By default the client logs everything as 'error'.\nYou can always override this using the optional options argument:\n\n```javascript\nclient.captureMessage('Foobar', { level: 'warn' });\n```\n\n### Metadata\n\nTo ease debugging it's possible to send some extra data with each error/message you send to Opbeat. The Opbeat API supports a lot of different metadata fields, most of which are automatlically managed by the opbeat-node client. But if you wish you can supply some extra details using `client_supplied_id`, `extra`, `user` or `query`. If you want to know more about all the fields, you should take a look at the full [Opbeat API docs](https://opbeat.com/docs/api/errorlog/).\n\nTo supply any of these extra fields, use the optional options argument when calling either `client.captureMessage()`, `client.captureError()` or `client.captureRequestError()`.\n\nHere are some examples:\n\n```javascript\n// Sending some extra details about the user\nclient.captureError(new Error('Boom!'), {\n  user: {\n    is_authenticated: true,\n    id: 'unique_id',\n    username: 'foo',\n    email: 'foo@example.com'\n  }\n});\n\n// Sending some abitrary extra details using the `extra` field\nclient.captureMessage('Foobar', {\n  extra: {\n    some_important_metric: 'foobar'\n  }\n});\n```\n\n## Integrations\n### Connect/Express middleware\nThe Opbeat middleware can be used as-is with either Connect or Express in the same way. Take note that in your middlewares, Opbeat must appear _after_ your main handler to pick up any errors that may result from handling a request.\n\n#### Connect\n```javascript\nvar connect = require('connect');\nfunction mainHandler(req, res) {\n  throw new Error('Broke!');\n}\nconnect(\n  connect.bodyParser(),\n  connect.cookieParser(),\n  mainHandler,\n  opbeat.middleware.connect(client || options),\n).listen(3000);\n```\n\n#### Express\n```javascript\nvar app = require('express').createServer();\napp.use(opbeat.middleware.express(client || options));\napp.get('/', function mainHandler(req, res) {\n  throw new Error('Broke!');\n});\napp.listen(3000);\n```\n\n__Note__: `opbeat.middleware.express` or `opbeat.middleware.connect` *must* be added to the middleware stack *before* any other error handling middlewares or there's a chance that the error will never get to Opbeat.\n\n## Credit\n\nThis project is a fork of the\n[raven-node](https://github.com/mattrobenolt/raven-node) module. It have\nbeen modified to work with [Opbeat](http://opbeat.com) instead of\n[Sentry](http://getsentry.com). All credit for the original work go out\nto the original contributors and the main author [Matt\nRobenolt](https://github.com/mattrobenolt).\n",
  "bugs": {
    "url": "https://github.com/watson/opbeat-node/issues"
  },
  "_id": "opbeat@0.3.1",
  "_from": "opbeat@~0.3.1"
}
